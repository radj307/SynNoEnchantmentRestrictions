using System;
using System.Linq;
using System.Threading.Tasks;
using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Noggog;

namespace SynEnchRestrictionsRemover
{
    internal static class Program
    {
        internal static Lazy<Blacklist> _lazySettings = null!;
        internal static Blacklist Settings => _lazySettings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings("Blacklist", "blacklist.json", out _lazySettings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "EnchRestricts.esp")
                .Run(args)
                .ConfigureAwait(false);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var counter = 0;

            Console.WriteLine("\n\nSynthesis No Enchantment Restrictions Patcher\nBeginning...\n");

            // Remove "MagicDisallowEnchanting" keyword from weapons
            foreach (var weap in state.LoadOrder.PriorityOrder.Weapon().WinningOverrides()
                .Where(w => w.Keywords?.Contains(Skyrim.Keyword.MagicDisallowEnchanting) == true))
            {
                if (weap.EditorID == null || Settings.IsBlacklisted(weap))
                    continue;

                var weapCopy = weap.DeepCopy();

                // Remove disallow enchanting keyword
                if (weapCopy?.Keywords?.Remove(Skyrim.Keyword.MagicDisallowEnchanting) ?? false)
                {
                    state.PatchMod.Weapons.Set(weapCopy);
                    Console.WriteLine($"[{++counter}]\tRemoved MagicDisallowEnchanting keyword from {weap.EditorID ?? "[INVALID EDITOR ID]"}");
                }
            }

            // Remove "MagicDisallowEnchanting" keyword from armors
            foreach (var armor in state.LoadOrder.PriorityOrder.Armor().WinningOverrides()
                .Where(a => a.Keywords?.Contains(Skyrim.Keyword.MagicDisallowEnchanting) == true))
            {
                if (armor.EditorID == null || Settings.IsBlacklisted(armor))
                    continue;

                var armorCopy = armor.DeepCopy();

                // Remove disallow enchanting keyword
                if(armorCopy?.Keywords?.Remove(Skyrim.Keyword.MagicDisallowEnchanting) ?? false)
                {
                    state.PatchMod.Armors.Set(armorCopy);
                    Console.WriteLine($"[{++counter}]\tRemoved MagicDisallowEnchanting keyword from {armor.EditorID ?? "[INVALID EDITOR ID]"}");
                }
            }

            // Change enchantments to allow being put on any clothing/armor/weapon
            var formList = state.PatchMod.FormLists.AddNew("NER");
            state.LoadOrder.PriorityOrder.Keyword().WinningOverrides().ForEach(kywd =>
            {
                var edid = kywd.EditorID;
                if ( !Settings.IsBlacklisted(kywd.FormKey.ModKey) && ( (edid?.Contains("Clothing") ?? false) || ( (edid?.Contains("Armor") ?? false) && (!edid?.Contains("ArmorMaterial") ?? false) ) || (edid?.Contains("WeapType") ?? false) ) )
                {
                    formList.Items.Add(kywd.FormKey);
                }
            });
            state.LoadOrder.PriorityOrder.ObjectEffect().WinningOverrides().ForEach(ench =>
            {
                if (ench.EnchantType != ObjectEffect.EnchantTypeEnum.StaffEnchantment && !Settings.IsBlacklisted(ench.FormKey.ModKey))
                {
                    var onch = state.PatchMod.ObjectEffects.GetOrAddAsOverride(ench);
                    onch.WornRestrictions.SetTo(formList);
                    Console.WriteLine($"[{++counter}]\tExpanded list of enchantable items for {onch.EditorID ?? "[INVALID EDITOR ID]"}");
                }
            });

            Console.WriteLine($"\n\nPatcher Complete.\nModified {counter} records.");
        }
    }
}
